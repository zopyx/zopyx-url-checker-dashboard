You are to recreate a small web application called "URL Availability Dashboard" exactly as specified below. Follow these requirements precisely so that the provided unit/integration tests and Playwright E2E tests pass.

Goal
- A FastAPI + Jinja2 + Bootstrap app to organize URLs into folders, probe availability, and manage data via a server-rendered UI. Persist configuration in a JSON file (no DB).

Environment
- Python 3.12
- Dependencies (pin exact versions):
  fastapi==0.111.0
  uvicorn[standard]==0.30.1
  jinja2==3.1.4
  httpx==0.27.0
  pydantic==2.8.2
  pytest==8.3.2
  pytest-asyncio==0.23.8
  pytest-playwright==0.5.0
  playwright==1.45.0
  requests==2.32.3

Persistence
- JSON file at project root named data.json by default.
- Overridable via env var DATA_FILE (tests rely on this). Use atomic writes (tmp file + os.replace).
- Structure:
  {
    "next_folder_id": int,
    "next_node_id": int,
    "folders": [
      {"id": int, "name": str, "nodes": [
        {"id": int, "folder_id": int, "name": str, "url": str, "comment": str, "active": bool}
      ]}
    ]
  }

Backend (FastAPI app in main.py)
- Mount /static for static files. Use Jinja2Templates with templates dir.
- GET / — render templates/index.html with context:
  - folders list; selection by optional query params folder_id/node_id
  - theme from cookie: "light" or "dark" (default light)
  - timeout from cookie (int, default 10, clamp to [1,120])
- JSON API
  1) GET /api/tree -> {"folders": [...]} (entire hierarchy)
  2) POST /api/folders (JSON FolderIn{name 1..200}) -> created folder
  3) PUT /api/folders/{folder_id} (JSON FolderIn) -> updated folder, 404 if not found
  4) DELETE /api/folders/{folder_id} -> {"ok": true}, 404 if not found
  5) POST /api/folders/{folder_id}/nodes (JSON NodeIn{name 1..200, url HttpUrl, comment optional, active bool}) -> created node in folder, 404 if folder not found
  6) PUT /api/nodes/{node_id} (JSON NodeIn) -> updated node, 404 if not found
  7) DELETE /api/nodes/{node_id} -> {"ok": true}, 404 if not found
  8) POST /api/nodes/{node_id}/test -> if active: {id, url, ok, status_code?, elapsed_ms, error?}; if inactive: {id, active:false, tested:false, reason:"Node inactive"}; 404 if not found. Use httpx.Client with follow_redirects=True.
  9) POST /api/folders/{folder_id}/test -> probe all active nodes concurrently (httpx.AsyncClient), return {folder_id, results:[per-node rows]} preserving node order; 404 if not found.
  10) GET /healthz -> {"status":"ok"}
- HTML Form Endpoints (all redirect to GET pages; test/html endpoints render index with results):
  - POST /folders/add (name) -> create folder; redirect to /?folder_id={id}
  - POST /folders/{folder_id}/rename (name) -> 404 if not found; redirect back to folder
  - POST /folders/{folder_id}/delete -> delete folder; redirect to "/"
  - POST /nodes/add (folder_id, name, url, comment, active[on|None]) -> create; redirect to /?node_id={id}
  - POST /nodes/{node_id}/edit (name, url, comment, active) -> 404 if not found; redirect to /?node_id={id}
  - POST /nodes/{node_id}/delete -> delete; redirect to parent folder
  - POST /nodes/{node_id}/toggle_active -> toggle; save; redirect safely to a GET page, attempting to preserve selection from referer; never redirect to POST-only URLs
  - POST /nodes/{node_id}/duplicate -> copy named copy_N_<base> (if original name was already a copy, keep the true base); ensure uniqueness within folder; redirect to new node
  - POST /nodes/{node_id}/test/html -> run probe (timeout from cookie), render results and inline chart under forms; default keep node selected unless keep_folder_context=1
  - POST /folders/{folder_id}/test/html -> parallel probe of folder nodes (timeout from cookie), render results and inline chart
  - GET /export -> download current JSON (attachment) including next ids
  - POST /import (multipart file) -> replace hierarchy with uploaded JSON after normalization; recalc next ids as max+1; redirect to first folder or root
  - POST /nodes/bulk_delete -> delete selected node_ids or all in folder:
    • If delete_all_in_folder and folder_id -> wipe nodes list in that folder
    • Else, read all node_ids using await request.form() and form.getlist("node_ids"); normalize to ints; delete across all folders
    • Empty selection -> redirect back without changes

Probing Helpers
- Synchronous probe returns ok/status_code/elapsed_ms or error + elapsed_ms
- Parallel probe returns list results in same order as active nodes and maps back to the full list including inactive rows with tested:false and reason
- Inline chart helper computes counts, average ms, and series geometry (width 640, height 160, gap 8) with colors (#198754 ok, #dc3545 error/fail, #6c757d skipped)

Template (templates/index.html)
- Use Bootstrap 5 and Bootstrap Icons via CDNs.
- Navbar: brand + buttons (Export, Import modal, Preferences modal, About modal)
- Two-column layout:
  • Left: Folders tree (details/summary). Each node shows name link, toggle active badge button, test button.
  • Right: Context forms.
- Context forms:
  • No selection: Add Folder form
  • Folder selected: Rename/Delete folder; Add Node form; Nodes table with bulk controls
  • Node selected: Edit Node form + Test, Duplicate, Delete
- Nodes table:
  • Standalone form id="bulkDeleteForm" with hidden folder_id
  • Row checkboxes: input.node-checkbox name="node_ids" form="bulkDeleteForm"
  • Top button "Delete selected" submits form="bulkDeleteForm"
  • "Delete all" opens confirmation modal posting delete_all_in_folder=1
  • A select-all checkbox with indeterminate state
  • Minimal inline JS: toggles select-all, maintains indeterminate, enables/disables delete button (but do not rely on JS for functionality)
- Test results: table + inline SVG chart using stats from backend
- Preferences modal:
  • Dark mode (cookie theme light/dark)
  • Timeout 1..120 seconds (cookie timeout); backend clamps values

Static
- static/css/style.css may contain minimal custom styles.
- static/js/app.js may include optional helpers; core UI does not depend on it for critical actions.

Testing
- Provide pytest.ini with -q and a playwright marker.
- Unit/Integration tests should cover:
  • API CRUD (folders, nodes)
  • Probing flows (mock httpx), inactive handling
  • HTML form endpoints (add/edit/delete/toggle/duplicate/test/html)
  • Export/Import roundtrip
  • Preferences cookies
  • Bulk delete (selected + delete all)
- Playwright E2E test:
  • Launch uvicorn as a subprocess with isolated DATA_FILE
  • Open page, create folder via modal, add two nodes, select checkboxes, click Delete selected, verify table cleared or shows no URLs

Quality/Edge Cases
- Avoid nested forms in table; associate checkboxes to standalone bulk form via form attribute
- Bulk delete must correctly delete multiple IDs; use getlist parsing on backend
- Import must normalize folder/node structures and recalc next ids
- Toggle active must not redirect to POST-only URLs (*/test/html)
- Timeouts are clamped to [1,120]
- Copy names increment copy_N_ base uniquely within a folder

Acceptance
- All unit/integration tests pass with `pytest -m "not playwright"`
- After `python -m playwright install`, E2E passes with `pytest -m playwright tests_e2e`
- Manual run: `uvicorn main:app --reload` shows functional UI at http://127.0.0.1:8000/
